[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "submissions-infrastructure"
version = "0.1.0"
description = "Infrastructure automation for conda-based deployments"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-timeout>=2.1",
    "ruff>=0.8.0",
]

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Markers
markers = [
    "integration: Integration tests requiring --run-integration flag",
    "slow: Slow-running tests",
]

# Output options
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Treat unregistered markers as errors
    "--strict-config",        # Treat config errors as errors
    "--showlocals",           # Show local variables in tracebacks
    "-v",                     # Verbose output
]

# Coverage options
[tool.coverage.run]
source = ["scripts/engine"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff]
# Target Python 3.13
target-version = "py313"
line-length = 88

# Exclude common directories
exclude = [
    ".git",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "htmlcov",
    "local",
]

[tool.ruff.lint]
# Enable common rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "RET",    # flake8-return
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

# Disable specific rules that conflict with project style
ignore = [
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
]

# Allow autofix for specific rule categories
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
# Test files can have additional flexibility
"tests/**/*.py" = [
    "ARG001",  # Unused function argument (fixtures)
    "PLR2004", # Magic values in tests are fine
]

[tool.ruff.lint.isort]
known-first-party = ["engine"]
force-sort-within-sections = true

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
