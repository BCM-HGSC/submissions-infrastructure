#!/usr/bin/env python3

"""
Extract information from Excel files. By default, dumps the active
worksheet as TSV.

Requires openpyxl be importable from /usr/bin/env/python
"""

import argparse
import logging
import sys
import warnings

try:
    import openpyxl
except ImportError:
    openpyxl = None


__version__ = "1.0.0-unstable"


def main():
    try:
        args = parse_args()
        if openpyxl:
            run(args)
        else:
            print(
                f"This script at {__file__} requires openpyxl to be installed in the"
                "python interpreter."
            )
            print(f"The active interpreter lacks openpyxl: {sys.executable}")
            print("Try changing PATH to use a different python interpreter.")
    except BrokenPipeError:
        pass  # normal; for example, piped to "head" command
    sys.stderr.close()


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("excel_file")
    parser.add_argument(
        "-a",
        "--active_title",
        action="store_true",
        help="only print name of active worksheet",
    )
    parser.add_argument(
        "-f",
        "--formulas",
        action="store_true",
        help="load cells as formulas instead of the data",
    )
    parser.add_argument(
        "-m", "--mark", action="store_true", help="mark active sheet, implies -t"
    )
    parser.add_argument(
        "-n",
        "--number",
        nargs=1,
        help="select specified sheet by number " "(default is the active worksheet)",
    )
    parser.add_argument("-q", "--quiet", action="store_true")
    parser.add_argument(
        "-s", "--tsv", action="store_true", help="emit titles in TSV, implies -t"
    )
    parser.add_argument(
        "-t", "--titles", action="store_true", help="list worksheet titles"
    )
    parser.add_argument(
        "--version", action="version", version="%(prog)s {}".format(__version__)
    )
    args = parser.parse_args()
    if args.mark or args.tsv:
        args.titles = True
    return args


def run(args):
    if args.quiet:
        warnings.simplefilter("ignore")
    data_only = not args.formulas
    wb = openpyxl.load_workbook(args.excel_file, read_only=True, data_only=data_only)
    if args.active_title:
        print(wb.active.title)
    elif args.titles:
        print_titles(wb, args.tsv, args.mark)
    else:
        number = args.number and int(args.number[0])  # either None or 0th element
        dump_worksheet(wb, number)


def print_titles(wb, tsv, mark):
    """print worksheet titles, optionally mark active"""
    num_digits = len(str(len(wb.worksheets) - 1))
    if tsv:
        fmt = "{1}\t{2}\t{3}" if mark else "{1}\t{3}"
    else:
        fmt = "{1:{0}}: {2} {3}" if mark else "{1:{0}}: {3}"
    for n, ws in enumerate(wb.worksheets):
        marker = "+" if ws is wb.active else "."
        print(fmt.format(num_digits, n, marker, ws.title))


def dump_worksheet(wb, number):
    """print worksheet contents"""
    worksheet = wb.active if number is None else wb.worksheets[number]
    for row in worksheet.rows:
        print(*(normalize_value(c) for c in row), sep="\t")


def normalize_value(cell):
    value = cell.value
    if value is None:
        value = ""
    value = str(value)
    return value


if __name__ == "__main__":
    main()
