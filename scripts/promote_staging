#!/usr/bin/env python3

"""
Promote the staging tier to production.

This script will:

- Read the current tier path from the environment (IAC_TIER_DIR).
- Take the parent of the tier path as the target path.
- Find the target of "staging" symlink.
- Require that the target be blue or green.
- Validate and then remove any existing "production" symlink.
- Create a new "production" symlink that points to the target of "staging".
- Move the "staging" symlink to the opposite tier (blue vs green) from "production"

Exit codes:
  0   Success
  1   General error (missing IAC_TIER_DIR, validation failure, same color error)
"""

from argparse import ArgumentParser
from os import environ
from pathlib import Path
import sys
from typing import NoReturn

# Import validation utilities
sys.path.insert(0, str(Path(__file__).parent / "engine"))
from validators import SymlinkValidationError, validate_symlink_target

BLUE_GREEN_TRANSITIONS = {
    "blue": "green",
    "green": "blue",
}


def validate_color(color: str) -> bool:
    """
    Pure function to check if a color is valid (blue or green).

    Args:
        color: Color string to validate

    Returns:
        True if color is 'blue' or 'green', False otherwise
    """
    return color in BLUE_GREEN_TRANSITIONS


def get_opposite_color(color: str) -> str:
    """
    Pure function to get the opposite blue/green color.

    Args:
        color: Current color ('blue' or 'green')

    Returns:
        Opposite color

    Raises:
        KeyError: If color is not 'blue' or 'green'
    """
    return BLUE_GREEN_TRANSITIONS[color]


def main() -> None:
    parser = ArgumentParser(description="Promote staging tier to production")
    parser.add_argument(
        "-n",
        "--dry-run",
        action="store_true",
        help="Show what would be done without making changes",
    )
    args = parser.parse_args()

    if "IAC_TIER_DIR" not in environ:
        die("environment is missing IAC_TIER_DIR")
    tier_path = Path(environ["IAC_TIER_DIR"]).resolve()
    infrastructure_path = tier_path.parent
    print(f"{infrastructure_path=}")
    staging_path = infrastructure_path / "staging"
    staging_color = validate_and_get_color(staging_path)
    production_path = infrastructure_path / "production"

    if production_path.exists():
        production_color = validate_and_get_color(production_path)
        if production_color == staging_color:
            die(f"staging and production symlinks have the same color: {staging_color}")
        if args.dry_run:
            print(f"[DRY RUN] Would remove production symlink: {production_path}")
        else:
            production_path.unlink()

    new_staging_color = get_opposite_color(staging_color)

    if args.dry_run:
        print(f"[DRY RUN] Would create production -> {staging_color}")
        print(f"[DRY RUN] Would update staging -> {new_staging_color}")
    else:
        production_path.symlink_to(staging_color)
        staging_path.unlink()
        staging_path.symlink_to(new_staging_color)


def validate_and_get_color(tier_path: Path) -> str:
    """
    Return the color (blue or green) of the input tier path symlink.
    Die if the tier path is not a symlink or does not point to the blue or green
    directories.
    """
    try:
        # Use the validation function to check symlink and target
        validate_symlink_target(tier_path, ["blue", "green"], check_exists=True)
        # If validation passes, read and return the color
        return tier_path.readlink().name
    except SymlinkValidationError as e:
        die(str(e))


def die(message: str) -> NoReturn:
    print(message, file=sys.stderr)
    sys.exit(1)


if __name__ == "__main__":
    main()
